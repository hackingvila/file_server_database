{
    "ani":"import http.server, time , random, pyshorteners
import socketserver, os,sys, threading
from functools import lru_cache
from os import system
from pyngrok import ngrok, conf
from termcolor import colored, cprint
from threading import Thread
from time import sleep
from colorama import Fore, Back, Style, init

try:
    @lru_cache(maxsize = 9999)
    def convert(seconds):
        seconds = seconds % (24 * 3600)
        hour = seconds // 3600
        seconds %= 3600
        minutes = seconds // 60
        seconds %= 60
        return "%d:%02d:%02d" % (hour, minutes, seconds)

    @lru_cache(maxsize = 9999)
    def timer():
        init()
        n = 7165
        print("\n", end="\r")
        while n > 0:
            print(Back.RED, "[~] Your session will expired in:-> ", convert(n), end="\r")
            print(Style.RESET_ALL, end="\r")
            n -= 1
            time.sleep(1)
        os.system("cls" if os.name== 'nt' else 'clear')
        logo()
        print("\n\n\n")
        cprint("[*] This tunnel session has been expired", 'red', attrs=['bold'], file=sys.stderr)
        print("\n")
        cprint("[#] Website: https://hackingvila.wordpress.com \n[#] Github: https://github.com/deadlysnowman3308", 'green', attrs=['bold'], file=sys.stderr)
        sys.exit(1)
        
    def logo():
        logo = r"""
                
                ______ _ _             _____                          
                |  ___(_) |           /  ___|                         
                | |_   _| | ___ ______\ `--.  ___ _ ____   _____ _ __ 
                |  _| | | |/ _ \______|`--. \/ _ \ '__\ \ / / _ \ '__|
                | |   | | |  __/      /\__/ /  __/ |   \ V /  __/ |   
                \_|   |_|_|\___|      \____/ \___|_|    \_/ \___|_|   
                                                        
                         <---   [+] Made by Aniket [+] --->         

        """
        cprint(f"{logo}", 'yellow', attrs=['bold'], file=sys.stderr)
    #   cprint(colored("[+] Made by Aniket [+]", "green", attrs=["blink"]))

    def logo2():
        logo2 = r"""
                ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄
                ██ ▄▄▄██▄██ ██ ▄▄█████ ▄▄▄ █ ▄▄█ ▄▄▀█▀███▀█ ▄▄█ ▄▄▀██
                ██ ▄▄███ ▄█ ██ ▄▄█▄▄██▄▄▄▀▀█ ▄▄█ ▀▀▄██ ▀ ██ ▄▄█ ▀▀▄██
                ██ ████▄▄▄█▄▄█▄▄▄█████ ▀▀▀ █▄▄▄█▄█▄▄███▄███▄▄▄█▄█▄▄██
                ▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀
                         <---   [+] Made by Aniket [+] --->            
                 <---[+]  https://hackingvila.wordpress.com  [+]--->

        """
        cprint(f"{logo2}", 'red', attrs=['bold'], file=sys.stderr)

    os.system("cls" if os.name== 'nt' else 'clear')
    logo()
    r = random.randint(1000, 65535)
    n = int(input(colored("\n\n  [?] Type your port number (1000-65535)/[Press ENTER for random port]  -->  ", "cyan", attrs=["bold"]) )or r)
    os.system("cls" if os.name== 'nt' else 'clear')
    print("\n")
    logo2()
    PORT =  n 
    handler = http.server.SimpleHTTPRequestHandler
    tunnel_url = "http://localhost:4040/inspect/http"

    @lru_cache(maxsize = 9999)
    def t_run():
        try:
            with socketserver.TCPServer(("", PORT), handler) as httpd:				
                cprint(" \t!! Attention !!", 'red', attrs=['bold'], file=sys.stderr)            
                print(colored("[x] Press CTRL + C for stop server [x]", "red", 'on_yellow'))
                print("\n")
                cprint("+------------------------------------------+", 'green', attrs=['bold'], file=sys.stderr) 
                cprint(f"| [-] File-Server enabled port:: --> {n} |", 'red', attrs=['bold'], file=sys.stderr) 
                cprint("+------------------------------------------+", 'yellow', attrs=['bold'], file=sys.stderr) 
                cprint(f"[-] Inspecting the Traffic through Tunnel --> {tunnel_url}", 'green', attrs=['bold'], file=sys.stderr)
                print(colored("[*] Local Server started at: --> http://127.0.0.1:" + str(PORT), "cyan"))
                httpd.serve_forever()
        except:
            os.system("cls" if os.name== 'nt' else 'clear')
            print("\tSomething error\n\t\t or")
            print("\n[+] Keyboard Interrupt by user [+]")
            sys.exit(1)

    @lru_cache(maxsize = 9999)
    def remote_link():
        url = ngrok.connect(PORT).public_url
        result = url.replace("http", "https")
        print(colored('[*] Tunnel/Remote access URL: --> '+ result, "cyan"))
        ngrok_process = ngrok.get_ngrok_process()
        @lru_cache(maxsize = 9999)
        def url_shortner():
            s = pyshorteners.Shortener(domain="https://ttm.sh")
            s1 = s.nullpointer.short(result)
            print(colored("[*] Short URL: --> " + s1 , "cyan"))
        t3 = threading.Thread(target=url_shortner)
        t3.start()
        try:
            ngrok_process.proc.wait()
        except:
            print(" Shutting down server.")
            ngrok.kill()

    @lru_cache(maxsize = 9999)
    def Main():
        try:
            t = threading.Thread(target=t_run, args=())
            t2 = threading.Thread(target=remote_link, args=())
            t2.start()
            t.start()
            timer_thread = Thread(target=timer)
            time.sleep(7)
            timer_thread.start()
        except:
            os.system("cls" if os.name== 'nt' else 'clear')
            print("\tSomething error\n\t\t or")
            print("\n[+] Keyboard Interrupt by user [+]")
            sys.exit(1)

    if __name__=="__main__":
        Main()
        
except:
    print("\n <--- Try Again --->")
    sys.exit(1)"
}